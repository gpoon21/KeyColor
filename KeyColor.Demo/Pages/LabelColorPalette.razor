@using System.Text

<div class="palette-container">
    <div class="labels-grid">
        @foreach (string label in _labels) {
            <div class="label-container" style="background-color: @_colorKey.GetUniqueColor(label).ToCssColor();">
                <div class="label-text">@label</div>
                <div class="label-subtext">@label</div>
            </div>
        }
    </div>

    <div class="controls-section">
        <div class="button-container">
            <button class="control-button" @onclick="NewLabels">Generate New Labels</button>
            <button class="control-button" @onclick="Update">Update Colors</button>
        </div>

        <div class="parameters-grid">
            <div class="numeric-field">
                <label for="seed">Color Seed</label>
                <input type="number" id="seed" @bind="_colorKey.Seed"/>
            </div>

            <div class="numeric-field">
                <label for="saturation-max">Saturation Ceiling</label>
                <input type="number" step="0.01" id="saturation-max" @bind="_colorKey.Saturation.Max"/>
            </div>

            <div class="numeric-field">
                <label for="saturation-min">Saturation Floor</label>
                <input type="number" step="0.01" id="saturation-min" @bind="_colorKey.Saturation.Min"/>
            </div>

            <div class="numeric-field">
                <label for="lightness-max">Lightness Ceiling</label>
                <input type="number" step="0.01" id="lightness-max" @bind="_colorKey.Lightness.Max"/>
            </div>

            <div class="numeric-field">
                <label for="lightness-min">Lightness Floor</label>
                <input type="number" step="0.01" id="lightness-min" @bind="_colorKey.Lightness.Min"/>
            </div>

            <div class="numeric-field">
                <label for="brightness-max">Brightness Ceiling</label>
                <input type="number" id="brightness-max" @bind="_colorKey.Brightness.Max"/>
            </div>

            <div class="numeric-field">
                <label for="brightness-min">Brightness Floor</label>
                <input type="number" id="brightness-min" @bind="_colorKey.Brightness.Min"/>
            </div>
        </div>
    </div>
</div>

@code {
    private readonly KeyColorGenerator _colorKey = new();
    private string[] _labels = Enumerable.Range(1, 10).Select(_ => GenerateRandomString(8)).ToArray();

    private void NewLabels() {
        _labels = Enumerable.Range(1, 10).Select(_ => GenerateRandomString(8)).ToArray();
        StateHasChanged();
    }

    public static string GenerateRandomString(int length) {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        if (length < 0)
            throw new ArgumentException("Length must be non-negative.");

        StringBuilder stringBuilder = new(length);

        for (int i = 0; i < length; i++) {
            stringBuilder.Append(chars[Random.Shared.Next(chars.Length)]);
        }

        return stringBuilder.ToString();
    }

    private void Update() {
        StateHasChanged();
    }
}